<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
			http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			http://www.springframework.org/schema/context 
			http://www.springframework.org/schema/context/spring-context-3.0.xsd
			http://www.springframework.org/schema/jee 
			http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
			http://www.springframework.org/schema/tx 
			http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
			http://www.springframework.org/schema/aop 
			http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	

	<!-- 配置c3p0数据源 ============================== -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		 <!-- 数据库基本信息配置 -->
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
    	<!-- 数据服务器地址 -->
        <property name="url" value="jdbc:mysql://127.0.0.1:3306/run?useUnicode=true&amp;allowMultiQueries=true&amp;characterEncoding=GBK" />       
 		<property name="username" value="root" />
        <property name="password" value="root" />  
        <!-- 初始化连接数量 -->
        <property name="initialSize" value="10" />
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="500" />
        <!-- 最大空闲连接数 -->
   		<property name="maxIdle" value="100" />
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="50" />
        <!-- 配置获取连接等待超时的时间 -->     
        <property name="maxWait" value="6000" />
        <!-- 超过时间限制是否回收 -->
        <property name="removeAbandoned" value="true" />
        <!-- 超过时间限制多长； -->
        <property name="removeAbandonedTimeout" value="1800" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="6000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <!-- 用来检测连接是否有效的sql，要求是一个查询语句-->
        <property name="validationQuery" value="SELECT 'x'" />
        <!-- 申请连接的时候检测 -->
        <property name="testWhileIdle" value="true" />
        <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
        <property name="testOnBorrow" value="false" />
        <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
        <property name="testOnReturn" value="false" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />    
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
        <!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：                
			                监控统计用的filter:stat
			                日志用的filter:log4j
               	   防御SQL注入的filter:wall -->
<!--         <property name="filters" value="stat" />   
 -->	
 	</bean> 
 	<!-- 配置c3p0数据源  END============================== -->
 	
 	
 	
 	
	<!-- myBatis文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatisCommon/MySqlmybatis.xml" />
	    <!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="mapperLocations" value="classpath:mybatis/*.xml" />
	</bean>
	
	<!-- 配置sqlSession -->
	<!-- <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
    	<constructor-arg ref="sqlSessionFactory"/>
	</bean> -->
	
	<!-- mybatis 面向接口配置 -->
 	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="sqlSessionFactory"  ref="sqlSessionFactory"/>  
        <property name="basePackage" value="com.runnew.other.dao"></property>  
    </bean>  


	<!-- 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 拦截器方式配置事物 -->
	<tx:annotation-driven transaction-manager="transactionManager"/> 
	
</beans>
